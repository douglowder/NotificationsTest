diff --git a/node_modules/expo-notifications/ios/EXNotifications/Notifications/NotificationCenterManager.swift b/node_modules/expo-notifications/ios/EXNotifications/Notifications/NotificationCenterManager.swift
index 598f6ee..d9521ed 100644
--- a/node_modules/expo-notifications/ios/EXNotifications/Notifications/NotificationCenterManager.swift
+++ b/node_modules/expo-notifications/ios/EXNotifications/Notifications/NotificationCenterManager.swift
@@ -2,25 +2,26 @@ import ExpoModulesCore
 import Foundation
 
 /**
- Protocols that NotificationCenterManager delegates may implement
+ Protocol that NotificationCenterManager delegates may implement
  */
-public protocol NotificationPresentationDelegate: AnyObject {
-  func willPresent(_ notification: UNNotification, completionHandler: @escaping (UNNotificationPresentationOptions) -> Void)
-}
-
-public protocol NotificationResponseDelegate: AnyObject {
-  func didReceive(_ response: UNNotificationResponse, completionHandler: @escaping () -> Void)
-}
-public protocol NotificationSettingsDelegate: AnyObject {
+public protocol NotificationDelegate: AnyObject {
+  func willPresent(_ notification: UNNotification, completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) -> Bool
+  func didReceive(_ response: UNNotificationResponse, completionHandler: @escaping () -> Void) -> Bool
   func openSettings(_ notification: UNNotification?)
-}
-
-public protocol NotificationRegistrationSuccessDelegate: AnyObject {
   func didRegister(_ deviceToken: String)
+  func didFailRegistration(_ error: Error)
 }
 
-public protocol NotificationRegistrationFailureDelegate: AnyObject {
-  func didFailRegistration(_ error: Error)
+public extension NotificationDelegate {
+  func willPresent(_ notification: UNNotification, completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) -> Bool {
+    return false
+  }
+  func didReceive(_ response: UNNotificationResponse, completionHandler: @escaping () -> Void) -> Bool {
+    return false
+  }
+  func openSettings(_ notification: UNNotification?) {}
+  func didRegister(_ deviceToken: String) {}
+  func didFailRegistration(_ error: Error) {}
 }
 
 /**
@@ -30,12 +31,11 @@ public protocol NotificationRegistrationFailureDelegate: AnyObject {
 @objc(EXNotificationCenterManager)
 public class NotificationCenterManager: NSObject,
   UNUserNotificationCenterDelegate,
-  NotificationRegistrationFailureDelegate,
-  NotificationRegistrationSuccessDelegate {
+  NotificationDelegate {
   @objc
   public static let shared = NotificationCenterManager()
 
-  var delegates: [AnyObject] = []
+  var delegates: [NotificationDelegate] = []
   var pendingResponses: [UNNotificationResponse] = []
   let userNotificationCenter: UNUserNotificationCenter = UNUserNotificationCenter.current()
 
@@ -54,12 +54,13 @@ public class NotificationCenterManager: NSObject,
     UNUserNotificationCenter.current().delegate = self
   }
 
-  public func addDelegate(_ delegate: AnyObject) {
+  public func addDelegate(_ delegate: NotificationDelegate) {
     delegates.append(delegate)
-    if let delegate = delegate as? NotificationResponseDelegate {
-      for pendingResponse in pendingResponses {
-        delegate.didReceive(pendingResponse, completionHandler: {})
-      }
+    var handled = false
+    for pendingResponse in pendingResponses {
+      handled = delegate.didReceive(pendingResponse, completionHandler: {})
+    }
+    if handled {
       pendingResponses.removeAll()
     }
   }
@@ -74,17 +75,13 @@ public class NotificationCenterManager: NSObject,
 
   public func didFailRegistration(_ error: any Error) {
     for delegate in delegates {
-      if let delegate = delegate as? NotificationRegistrationFailureDelegate {
-        delegate.didFailRegistration(error)
-      }
+      delegate.didFailRegistration(error)
     }
   }
 
   public func didRegister(_ deviceToken: String) {
     for delegate in delegates {
-      if let delegate = delegate as? NotificationRegistrationSuccessDelegate {
-        delegate.didRegister(deviceToken)
-      }
+      delegate.didRegister(deviceToken)
     }
   }
 
@@ -95,12 +92,16 @@ public class NotificationCenterManager: NSObject,
     willPresent notification: UNNotification,
     withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void
   ) {
+    var handled = false
     for delegate in delegates {
-      if let delegate = delegate as? NotificationPresentationDelegate {
-        delegate.willPresent(notification, completionHandler: completionHandler)
-      }
+      handled = handled || delegate.willPresent(notification, completionHandler: completionHandler)
+    }
+    if !handled {
+      // TODO: For now, until all code is converted to Swift,
+      // ensure notification is presented even if handlers are not registered
+      // Later revisit this
+      completionHandler([.badge, .banner, .sound])
     }
-    completionHandler([])
   }
 
   public func userNotificationCenter(
@@ -110,10 +111,7 @@ public class NotificationCenterManager: NSObject,
   ) {
     var handled = false
     for delegate in delegates {
-      if let delegate = delegate as? NotificationResponseDelegate {
-        delegate.didReceive(response, completionHandler: completionHandler)
-      }
-      handled = true
+      handled = handled || delegate.didReceive(response, completionHandler: completionHandler)
     }
     if !handled {
       pendingResponses.append(response)
@@ -123,9 +121,7 @@ public class NotificationCenterManager: NSObject,
 
   public func userNotificationCenter(_ center: UNUserNotificationCenter, openSettingsFor notification: UNNotification?) {
     for delegate in delegates {
-      if let delegate = delegate as? NotificationSettingsDelegate {
-        delegate.openSettings(notification)
-      }
+      delegate.openSettings(notification)
     }
   }
 }
diff --git a/node_modules/expo-notifications/ios/EXNotifications/Notifications/Presenting/PresentationModule.swift b/node_modules/expo-notifications/ios/EXNotifications/Notifications/Presenting/PresentationModule.swift
index 568f822..ef03495 100644
--- a/node_modules/expo-notifications/ios/EXNotifications/Notifications/Presenting/PresentationModule.swift
+++ b/node_modules/expo-notifications/ios/EXNotifications/Notifications/Presenting/PresentationModule.swift
@@ -4,27 +4,17 @@ import ExpoModulesCore
 import UIKit
 import MachO
 
-public class PresentationModule: Module, NotificationPresentationDelegate {
+public class PresentationModule: Module, NotificationDelegate {
   var presentedNotifications: Set<String> = []
 
-  public func willPresent(_ notification: UNNotification, completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
-    let identifier = notification.request.identifier
-    if presentedNotifications.contains(identifier) {
-      presentedNotifications.remove(identifier)
-      completionHandler([.badge, .sound, .banner]) // .alert is deprecated
-    } else {
-      completionHandler([])
-    }
-  }
-
   public func definition() -> ModuleDefinition {
     Name("ExpoNotificationPresenter")
 
-    OnStartObserving {
+    OnCreate {
       NotificationCenterManager.shared.addDelegate(self)
     }
 
-    OnStopObserving {
+    OnDestroy {
       NotificationCenterManager.shared.removeDelegate(self)
     }
 
@@ -73,6 +63,17 @@ public class PresentationModule: Module, NotificationPresentationDelegate {
     }
   }
 
+  public func willPresent(_ notification: UNNotification, completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) -> Bool {
+    let identifier = notification.request.identifier
+    if presentedNotifications.contains(identifier) {
+      presentedNotifications.remove(identifier)
+      completionHandler([.badge, .sound, .banner]) // .alert is deprecated
+      return true
+    } else {
+      return false
+    }
+  }
+
   func serializeNotifications(_ notifications: [UNNotification]) -> [[AnyHashable: Any]] {
     return notifications.map { notification in
       return EXNotificationSerializer.serializedNotification(notification)
diff --git a/node_modules/expo-notifications/ios/EXNotifications/Notifications/Scheduling/SchedulerModule.swift b/node_modules/expo-notifications/ios/EXNotifications/Notifications/Scheduling/SchedulerModule.swift
index 17c5ad4..b397b7a 100644
--- a/node_modules/expo-notifications/ios/EXNotifications/Notifications/Scheduling/SchedulerModule.swift
+++ b/node_modules/expo-notifications/ios/EXNotifications/Notifications/Scheduling/SchedulerModule.swift
@@ -109,6 +109,81 @@ struct YearlyTriggerRecord: Record {
 }
 
 public class SchedulerModule: Module {
+  public func definition() -> ModuleDefinition {
+    Name("ExpoNotificationScheduler")
+
+    AsyncFunction("getAllScheduledNotificationsAsync") { (promise: Promise) in
+      UNUserNotificationCenter.current().getPendingNotificationRequests { (requests: [UNNotificationRequest]) in
+        var serializedRequests: [Any] = []
+        requests.forEach {request in
+          serializedRequests.append(EXNotificationSerializer.serializedNotificationRequest(request))
+        }
+        promise.resolve(serializedRequests)
+      }
+    }
+    .runOnQueue(.main)
+
+    AsyncFunction("cancelScheduledNotificationAsync") { (identifier: String) in
+      UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [identifier])
+    }
+
+    AsyncFunction("cancelAllScheduledNotificationsAsync") { () in
+      UNUserNotificationCenter.current().removeAllPendingNotificationRequests()
+    }
+
+    AsyncFunction("scheduleNotificationAsync") { (identifier: String, notificationSpec: [String: Any], triggerSpec: [String: Any]?, promise: Promise) in
+      do {
+        guard let request = try buildNotificationRequest(identifier: identifier, contentInput: notificationSpec, triggerInput: triggerSpec) else {
+          promise.reject("ERR_NOTIFICATIONS_FAILED_TO_SCHEDULE", "Failed to build notification request")
+          return
+        }
+        UNUserNotificationCenter.current().add(request) {error in
+          if let error = error {
+            promise.reject("ERR_NOTIFICATIONS_FAILED_TO_SCHEDULE", "Failed to schedule notification, \(error)")
+          } else {
+            promise.resolve()
+          }
+          UNUserNotificationCenter.current().add(request) {error in
+            if let error = error {
+              promise.reject("ERR_NOTIFICATIONS_FAILED_TO_SCHEDULE", "Failed to schedule notification, \(error)")
+            } else {
+              promise.resolve(identifier)
+            }
+          }
+        }
+      } catch {
+        promise.reject("ERR_NOTIFICATIONS_FAILED_TO_SCHEDULE", "Failed to schedule notification, \(error)")
+      }
+    }
+
+    AsyncFunction("getNextTriggerDateAsync") { (triggerSpec: [String: Any], promise: Promise) in
+      guard let appContext = appContext,
+            let trigger = try? triggerFromParams(triggerSpec, appContext: appContext) else {
+        promise.reject("ERR_NOTIFICATIONS_INVALID_CALENDAR_TRIGGER", "Invalid trigger specification")
+        return
+      }
+      if trigger is UNCalendarNotificationTrigger {
+        if let calendarTrigger = trigger as? UNCalendarNotificationTrigger,
+           let nextTriggerDate = calendarTrigger.nextTriggerDate() {
+          promise.resolve(nextTriggerDate.timeIntervalSince1970 * 1000)
+        } else {
+          promise.resolve(nil)
+        }
+        return
+      }
+      if trigger is UNTimeIntervalNotificationTrigger {
+        if let timeIntervalTrigger = trigger as? UNTimeIntervalNotificationTrigger,
+           let nextTriggerDate = timeIntervalTrigger.nextTriggerDate() {
+          promise.resolve(nextTriggerDate.timeIntervalSince1970 * 1000)
+        } else {
+          promise.resolve(nil)
+        }
+        return
+      }
+      promise.reject("ERR_NOTIFICATIONS_INVALID_CALENDAR_TRIGGER", "It is not possible to get next trigger date for triggers other than calendar-based. Provided trigger resulted in \(type(of: trigger)) trigger.")
+    }
+  }
+
   func triggerFromParams(_ params: [String: Any]?, appContext: AppContext) throws -> UNNotificationTrigger? {
     guard let params = params else {
       return nil
@@ -166,7 +241,7 @@ public class SchedulerModule: Module {
         day: yearlyTrigger.day,
         hour: yearlyTrigger.hour,
         minute: yearlyTrigger.minute
-      ))
+      )
       var trigger: UNNotificationTrigger?
       try EXNotificationObjcWrapper.tryExecute {
         trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
@@ -224,77 +299,4 @@ public class SchedulerModule: Module {
       trigger: triggerFromParams(triggerInput, appContext: appContext)
     )
   }
-
-  public func definition() -> ModuleDefinition {
-    Name("ExpoNotificationScheduler")
-
-    AsyncFunction("getAllScheduledNotificationsAsync") { (promise: Promise) in
-      UNUserNotificationCenter.current().getPendingNotificationRequests { (requests: [UNNotificationRequest]) in
-        var serializedRequests: [Any] = []
-        requests.forEach {request in
-          serializedRequests.append(EXNotificationSerializer.serializedNotificationRequest(request))
-        }
-        promise.resolve(serializedRequests)
-      }
-    }
-    .runOnQueue(.main)
-
-    AsyncFunction("cancelScheduledNotificationAsync") { (identifier: String) in
-      UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [identifier])
-    }
-
-    AsyncFunction("cancelAllScheduledNotificationsAsync") { () in
-      UNUserNotificationCenter.current().removeAllPendingNotificationRequests()
-    }
-
-    AsyncFunction("scheduleNotificationAsync") { (identifier: String, notificationSpec: [String: Any], triggerSpec: [String: Any], promise: Promise) in
-      guard let request = try? buildNotificationRequest(identifier: identifier, contentInput: notificationSpec, triggerInput: triggerSpec) else {
-        promise.reject("ERR_NOTIFICATIONS_FAILED_TO_SCHEDULE", "Failed to build notification request")
-        return
-      }
-      UNUserNotificationCenter.current().add(request) {error in
-        if let error = error {
-          promise.reject("ERR_NOTIFICATIONS_FAILED_TO_SCHEDULE", "Failed to schedule notification, \(error)")
-        } else {
-          promise.resolve()
-        }
-        UNUserNotificationCenter.current().add(request) {error in
-          if let error = error {
-            promise.reject("ERR_NOTIFICATIONS_FAILED_TO_SCHEDULE", "Failed to schedule notification, \(error)")
-          } else {
-            promise.resolve(identifier)
-          }
-        }
-      } catch {
-        promise.reject("ERR_NOTIFICATIONS_FAILED_TO_SCHEDULE", "Failed to schedule notification, \(error)")
-      }
-    }
-
-    AsyncFunction("getNextTriggerDateAsync") { (triggerSpec: [String: Any], promise: Promise) in
-      guard let appContext = appContext,
-        let trigger = try? triggerFromParams(triggerSpec, appContext: appContext) else {
-        promise.reject("ERR_NOTIFICATIONS_INVALID_CALENDAR_TRIGGER", "Invalid trigger specification")
-        return
-      }
-      if trigger is UNCalendarNotificationTrigger {
-        if let calendarTrigger = trigger as? UNCalendarNotificationTrigger,
-          let nextTriggerDate = calendarTrigger.nextTriggerDate() {
-          promise.resolve(nextTriggerDate.timeIntervalSince1970 * 1000)
-        } else {
-          promise.resolve(nil)
-        }
-        return
-      }
-      if trigger is UNTimeIntervalNotificationTrigger {
-        if let timeIntervalTrigger = trigger as? UNTimeIntervalNotificationTrigger,
-          let nextTriggerDate = timeIntervalTrigger.nextTriggerDate() {
-          promise.resolve(nextTriggerDate.timeIntervalSince1970 * 1000)
-        } else {
-          promise.resolve(nil)
-        }
-        return
-      }
-      promise.reject("ERR_NOTIFICATIONS_INVALID_CALENDAR_TRIGGER", "It is not possible to get next trigger date for triggers other than calendar-based. Provided trigger resulted in \(type(of: trigger)) trigger.")
-    }
-  }
 }
diff --git a/node_modules/expo-notifications/ios/EXNotifications/PushToken/PushTokenModule.swift b/node_modules/expo-notifications/ios/EXNotifications/PushToken/PushTokenModule.swift
index c20c2cb..22353c8 100644
--- a/node_modules/expo-notifications/ios/EXNotifications/PushToken/PushTokenModule.swift
+++ b/node_modules/expo-notifications/ios/EXNotifications/PushToken/PushTokenModule.swift
@@ -6,18 +6,7 @@ import MachO
 
 let onDevicePushTokenEventName = "onDevicePushToken"
 
-public class PushTokenModule: Module, NotificationRegistrationSuccessDelegate, NotificationRegistrationFailureDelegate {
-  public func didRegister(_ deviceToken: String) {
-    promiseNotYetResolved?.resolve(deviceToken)
-    promiseNotYetResolved = nil
-    self.sendEvent(onDevicePushTokenEventName, ["devicePushToken": deviceToken])
-  }
-
-  public func didFailRegistration(_ error: any Error) {
-    promiseNotYetResolved?.reject(error)
-    promiseNotYetResolved = nil
-  }
-
+public class PushTokenModule: Module, NotificationDelegate {
   var promiseNotYetResolved: Promise?
 
   public func definition() -> ModuleDefinition {
@@ -48,4 +37,15 @@ public class PushTokenModule: Module, NotificationRegistrationSuccessDelegate, N
     }
     .runOnQueue(.main)
   }
+
+  public func didRegister(_ deviceToken: String) {
+    promiseNotYetResolved?.resolve(deviceToken)
+    promiseNotYetResolved = nil
+    self.sendEvent(onDevicePushTokenEventName, ["devicePushToken": deviceToken])
+  }
+
+  public func didFailRegistration(_ error: any Error) {
+    promiseNotYetResolved?.reject(error)
+    promiseNotYetResolved = nil
+  }
 }
