diff --git a/node_modules/expo-notifications/expo-module.config.json b/node_modules/expo-notifications/expo-module.config.json
index a335999..688c0f0 100644
--- a/node_modules/expo-notifications/expo-module.config.json
+++ b/node_modules/expo-notifications/expo-module.config.json
@@ -4,6 +4,8 @@
     "modules": [
       "BadgeModule",
       "CategoriesModule",
+      "HandlerModule",
+      "EmitterModule",
       "PresentationModule",
       "PushTokenModule",
       "ServerRegistrationModule",
diff --git a/node_modules/expo-notifications/ios/EXNotifications/Notifications/EXNotificationSerializer.h b/node_modules/expo-notifications/ios/EXNotifications/Notifications/EXNotificationSerializer.h
index 14e35d3..12a72cb 100644
--- a/node_modules/expo-notifications/ios/EXNotifications/Notifications/EXNotificationSerializer.h
+++ b/node_modules/expo-notifications/ios/EXNotifications/Notifications/EXNotificationSerializer.h
@@ -6,10 +6,10 @@ NS_ASSUME_NONNULL_BEGIN
 
 @interface EXNotificationSerializer : NSObject
 
-+ (NSDictionary *)serializedNotification:(UNNotification *)notification;
-+ (NSDictionary *)serializedNotificationRequest:(UNNotificationRequest *)notificationRequest;
-+ (NSDictionary *)serializedNotificationResponse:(UNNotificationResponse *)notificationResponse;
-+ (NSDictionary *)serializedNotificationContent:(UNNotificationRequest *)request;
++ (NSDictionary<NSString *, NSObject *> *)serializedNotification:(UNNotification *)notification;
++ (NSDictionary<NSString *, NSObject *> *)serializedNotificationRequest:(UNNotificationRequest *)notificationRequest;
++ (NSDictionary<NSString *, NSObject *> *)serializedNotificationResponse:(UNNotificationResponse *)notificationResponse;
++ (NSDictionary<NSString *, NSObject *> *)serializedNotificationContent:(UNNotificationRequest *)request;
 
 @end
 
diff --git a/node_modules/expo-notifications/ios/EXNotifications/Notifications/EXNotificationSerializer.m b/node_modules/expo-notifications/ios/EXNotifications/Notifications/EXNotificationSerializer.m
index 1c5bdd0..5f6d83a 100644
--- a/node_modules/expo-notifications/ios/EXNotifications/Notifications/EXNotificationSerializer.m
+++ b/node_modules/expo-notifications/ios/EXNotifications/Notifications/EXNotificationSerializer.m
@@ -9,7 +9,7 @@ static NSString * const EXNotificationResponseDefaultActionIdentifier = @"expo.m
 
 @implementation EXNotificationSerializer
 
-+ (NSDictionary *)serializedNotificationResponse:(UNNotificationResponse *)response
++ (NSDictionary<NSString *, NSObject *> *)serializedNotificationResponse:(UNNotificationResponse *)response
 {
   NSMutableDictionary *serializedResponse = [NSMutableDictionary dictionary];
   NSString *actionIdentifier = response.actionIdentifier;
@@ -25,7 +25,7 @@ static NSString * const EXNotificationResponseDefaultActionIdentifier = @"expo.m
   return serializedResponse;
 }
 
-+ (NSDictionary *)serializedNotification:(UNNotification *)notification
++ (NSDictionary<NSString *, NSObject *> *)serializedNotification:(UNNotification *)notification
 {
   NSMutableDictionary *serializedNotification = [NSMutableDictionary dictionary];
   serializedNotification[@"request"] = [self serializedNotificationRequest:notification.request];
@@ -33,7 +33,7 @@ static NSString * const EXNotificationResponseDefaultActionIdentifier = @"expo.m
   return serializedNotification;
 }
 
-+ (NSDictionary *)serializedNotificationRequest:(UNNotificationRequest *)request
++ (NSDictionary<NSString *, NSObject *> *)serializedNotificationRequest:(UNNotificationRequest *)request
 {
   NSMutableDictionary *serializedRequest = [NSMutableDictionary dictionary];
   serializedRequest[@"identifier"] = request.identifier;
@@ -42,7 +42,7 @@ static NSString * const EXNotificationResponseDefaultActionIdentifier = @"expo.m
   return serializedRequest;
 }
 
-+ (NSDictionary *)serializedNotificationContent:(UNNotificationRequest *)request
++ (NSDictionary<NSString *, NSObject *> *)serializedNotificationContent:(UNNotificationRequest *)request
 {
   UNNotificationContent *content = request.content;
   NSMutableDictionary *serializedContent = [NSMutableDictionary dictionary];
@@ -76,7 +76,7 @@ static NSString * const EXNotificationResponseDefaultActionIdentifier = @"expo.m
   return [interruptionLevelMap objectForKey:@(interruptionLevel)];
 }
 
-+ (NSDictionary *)serializedNotificationData:(UNNotificationRequest *)request
++ (NSDictionary<NSString *, NSObject *> *)serializedNotificationData:(UNNotificationRequest *)request
 {
   BOOL isRemote = [request.trigger isKindOfClass:[UNPushNotificationTrigger class]];
   return isRemote ? request.content.userInfo[@"body"] : request.content.userInfo;
@@ -109,7 +109,7 @@ static NSString * const EXNotificationResponseDefaultActionIdentifier = @"expo.m
   return serializedAttachments;
 }
 
-+ (NSDictionary *)serializedNotificationAttachment:(UNNotificationAttachment *)attachment
++ (NSDictionary<NSString *, NSObject *> *)serializedNotificationAttachment:(UNNotificationAttachment *)attachment
 {
   NSMutableDictionary *serializedAttachment = [NSMutableDictionary dictionary];
   serializedAttachment[@"identifier"] = attachment.identifier ?: [NSNull null];
@@ -118,7 +118,7 @@ static NSString * const EXNotificationResponseDefaultActionIdentifier = @"expo.m
   return serializedAttachment;
 }
 
-+ (NSDictionary *)serializedNotificationTrigger:(UNNotificationRequest *)request
++ (NSDictionary<NSString *, NSObject *> *)serializedNotificationTrigger:(UNNotificationRequest *)request
 {
   UNNotificationTrigger *trigger = request.trigger;
   NSMutableDictionary *serializedTrigger = [NSMutableDictionary dictionary];
@@ -149,7 +149,7 @@ static NSString * const EXNotificationResponseDefaultActionIdentifier = @"expo.m
   return serializedTrigger;
 }
 
-+ (NSDictionary *)serializedDateComponents:(NSDateComponents *)dateComponents
++ (NSDictionary<NSString *, NSObject *> *)serializedDateComponents:(NSDateComponents *)dateComponents
 {
   NSMutableDictionary *serializedComponents = [NSMutableDictionary dictionary];
   NSArray<NSNumber *> *autoConvertedUnits = [[self calendarUnitsConversionMap] allKeys];
@@ -197,7 +197,7 @@ static NSString * const EXNotificationResponseDefaultActionIdentifier = @"expo.m
   return [self calendarUnitsConversionMap][@(calendarUnit)];
 }
 
-+ (NSDictionary *)serializedRegion:(CLRegion *)region
++ (NSDictionary<NSString *, NSObject *> *)serializedRegion:(CLRegion *)region
 {
   NSMutableDictionary *serializedRegion = [NSMutableDictionary dictionary];
   serializedRegion[@"identifier"] = region.identifier;
diff --git a/node_modules/expo-notifications/ios/EXNotifications/Notifications/Emitter/EXNotificationsEmitter.h b/node_modules/expo-notifications/ios/EXNotifications/Notifications/Emitter/EXNotificationsEmitter.h
deleted file mode 100644
index 3590bf1..0000000
--- a/node_modules/expo-notifications/ios/EXNotifications/Notifications/Emitter/EXNotificationsEmitter.h
+++ /dev/null
@@ -1,18 +0,0 @@
-// Copyright 2018-present 650 Industries. All rights reserved.
-
-#import <ExpoModulesCore/EXExportedModule.h>
-#import <ExpoModulesCore/EXEventEmitter.h>
-#import <ExpoModulesCore/EXModuleRegistryConsumer.h>
-#import <ExpoModulesCore/EXEventEmitterService.h>
-
-#import <EXNotifications/EXNotificationsDelegate.h>
-
-static NSString * const onDidReceiveNotification = @"onDidReceiveNotification";
-static NSString * const onDidReceiveNotificationResponse = @"onDidReceiveNotificationResponse";
-static NSString * const onDidClearNotificationResponse = @"onDidClearNotificationResponse";
-
-@interface EXNotificationsEmitter : EXExportedModule <EXEventEmitter, EXModuleRegistryConsumer, EXNotificationsDelegate>
-
-@property (nonatomic, weak, readonly) id<EXEventEmitterService> eventEmitter;
-
-@end
diff --git a/node_modules/expo-notifications/ios/EXNotifications/Notifications/Emitter/EXNotificationsEmitter.m b/node_modules/expo-notifications/ios/EXNotifications/Notifications/Emitter/EXNotificationsEmitter.m
deleted file mode 100644
index 7d46d62..0000000
--- a/node_modules/expo-notifications/ios/EXNotifications/Notifications/Emitter/EXNotificationsEmitter.m
+++ /dev/null
@@ -1,120 +0,0 @@
-// Copyright 2018-present 650 Industries. All rights reserved.
-
-#import <EXNotifications/EXNotificationsEmitter.h>
-#import <EXNotifications/EXNotificationSerializer.h>
-#import <EXNotifications/EXNotificationCenterDelegate.h>
-
-#import <ExpoModulesCore/EXEventEmitterService.h>
-
-@interface EXNotificationsEmitter ()
-
-@property (nonatomic, weak) id<EXNotificationCenterDelegate> notificationCenterDelegate;
-
-@property (nonatomic, assign) BOOL isBeingObserved;
-@property (nonatomic, assign) BOOL isListening;
-
-@property (nonatomic, weak) id<EXEventEmitterService> eventEmitter;
-
-@end
-
-@implementation EXNotificationsEmitter
-
-EX_EXPORT_MODULE(ExpoNotificationsEmitter);
-
-EX_EXPORT_METHOD_AS(getLastNotificationResponseAsync,
-                    getLastNotificationResponseAsyncWithResolver:(EXPromiseResolveBlock)resolve reject:(EXPromiseRejectBlock)reject)
-{
-  UNNotificationResponse* lastResponse = _notificationCenterDelegate.lastNotificationResponse;
-  resolve(lastResponse ? [self serializedNotificationResponse:lastResponse] : [NSNull null]);
-}
-
-EX_EXPORT_METHOD_AS(clearLastNotificationResponseAsync,
-                    clearLastNotificationResponseAsyncWithResolver:(EXPromiseResolveBlock)resolve reject:(EXPromiseRejectBlock)reject)
-{
-  _notificationCenterDelegate.lastNotificationResponse = nil;
-  resolve([NSNull null]);
-}
-
-# pragma mark - EXModuleRegistryConsumer
-
-- (void)setModuleRegistry:(EXModuleRegistry *)moduleRegistry
-{
-  _eventEmitter = [moduleRegistry getModuleImplementingProtocol:@protocol(EXEventEmitterService)];
-  _notificationCenterDelegate = [moduleRegistry getSingletonModuleForName:@"NotificationCenterDelegate"];
-}
-
-# pragma mark - EXEventEmitter
-
-- (NSArray<NSString *> *)supportedEvents
-{
-  return @[onDidReceiveNotification, onDidReceiveNotificationResponse, onDidClearNotificationResponse];
-}
-
-- (void)startObserving
-{
-  [self setIsBeingObserved:YES];
-}
-
-- (void)stopObserving
-{
-  [self setIsBeingObserved:NO];
-}
-
-- (void)setIsBeingObserved:(BOOL)isBeingObserved
-{
-  _isBeingObserved = isBeingObserved;
-  BOOL shouldListen = _isBeingObserved;
-  if (shouldListen && !_isListening) {
-    [_notificationCenterDelegate addDelegate:self];
-    _isListening = YES;
-  } else if (!shouldListen && _isListening) {
-    [_notificationCenterDelegate removeDelegate:self];
-    _isListening = NO;
-  }
-}
-
-# pragma mark - EXNotificationsDelegate
-
-- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler
-{
-  // Background task execution would happen here.
-  completionHandler(UIBackgroundFetchResultNoData);
-}
-
-- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)(void))completionHandler
-{
-  _notificationCenterDelegate.lastNotificationResponse = response;
-  [self sendEventWithName:onDidReceiveNotificationResponse body:[self serializedNotificationResponse:response]];
-  completionHandler();
-}
-
-- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler
-{
-  [self sendEventWithName:onDidReceiveNotification body:[self serializedNotification:notification]];
-  completionHandler(UNNotificationPresentationOptionNone);
-}
-
-- (void)sendEventWithName:(NSString *)eventName body:(id)body
-{
-  // Silence React Native warning: "Sending ... with no listeners registered."
-  // See: https://github.com/expo/expo/pull/10883#pullrequestreview-529183413
-  // While in practice we don't need to verify this, as as of the end of 2020
-  // we wouldn't send any event to JS if we weren't being observed because
-  // we wouldn't be subscribed to the notification center delegate it's nice
-  // to be sure this problem won't ever arise.
-  if (_isBeingObserved) {
-    [_eventEmitter sendEventWithName:eventName body:body];
-  }
-}
-
-- (NSDictionary *)serializedNotification:(UNNotification *)notification
-{
-  return [EXNotificationSerializer serializedNotification:notification];
-}
-
-- (NSDictionary *)serializedNotificationResponse:(UNNotificationResponse *)notificationResponse
-{
-  return [EXNotificationSerializer serializedNotificationResponse:notificationResponse];
-}
-
-@end
diff --git a/node_modules/expo-notifications/ios/EXNotifications/Notifications/Emitter/EmitterModule.swift b/node_modules/expo-notifications/ios/EXNotifications/Notifications/Emitter/EmitterModule.swift
new file mode 100644
index 0000000..4aadb02
--- /dev/null
+++ b/node_modules/expo-notifications/ios/EXNotifications/Notifications/Emitter/EmitterModule.swift
@@ -0,0 +1,50 @@
+//  Copyright © 2024 650 Industries. All rights reserved.
+
+import ExpoModulesCore
+import UIKit
+import MachO
+
+let onDidReceiveNotification = "onDidReceiveNotification"
+let onDidReceiveNotificationResponse = "onDidReceiveNotificationResponse"
+let onDidClearNotificationResponse = "onDidClearNotificationResponse"
+
+public class EmitterModule: Module, NotificationDelegate {
+  var presentedNotifications: Set<String> = []
+
+  public func definition() -> ModuleDefinition {
+    Name("ExpoNotificationsEmitter")
+
+    Events([onDidReceiveNotification, onDidReceiveNotificationResponse, onDidClearNotificationResponse])
+
+    OnStartObserving {
+      NotificationCenterManager.shared.addDelegate(self)
+    }
+
+    OnStopObserving {
+      NotificationCenterManager.shared.removeDelegate(self)
+    }
+  }
+
+  /*
+   TODO: background processing
+
+   - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler
+   {
+     // Background task execution would happen here.
+     completionHandler(UIBackgroundFetchResultNoData);
+   }
+   */
+  
+  public func didReceive(_ response: UNNotificationResponse, completionHandler: @escaping () -> Void) -> Bool {
+    NotificationCenterManager.shared.lastResponse = response
+    let serializedResponse = EXNotificationSerializer.serializedNotificationResponse(response)
+    self.sendEvent(onDidReceiveNotificationResponse, serializedResponse as [String: Any])
+    return true
+  }
+
+  public func willPresent(_ notification: UNNotification, completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) -> Bool {
+    let serializedNotification = EXNotificationSerializer.serializedNotification(notification)
+    self.sendEvent(onDidReceiveNotification, serializedNotification as [String: Any])
+    return true
+  }
+}
diff --git a/node_modules/expo-notifications/ios/EXNotifications/Notifications/Handler/HandlerModule.swift b/node_modules/expo-notifications/ios/EXNotifications/Notifications/Handler/HandlerModule.swift
new file mode 100644
index 0000000..4b70073
--- /dev/null
+++ b/node_modules/expo-notifications/ios/EXNotifications/Notifications/Handler/HandlerModule.swift
@@ -0,0 +1,61 @@
+//  Copyright © 2024 650 Industries. All rights reserved.
+
+import ExpoModulesCore
+import UIKit
+import MachO
+
+let onHandleNotification = "onHandleNotification"
+let onHandleNotificationTimeout = "onHandleNotificationTimeout"
+
+public class HandlerModule: Module, NotificationDelegate {
+  var tasksMap: [String: EXSingleNotificationHandlerTask] = [:]
+
+  public func definition() -> ModuleDefinition {
+    Name("ExpoNotificationsEmitter")
+
+    Events([onHandleNotification, onHandleNotificationTimeout])
+
+    OnStartObserving {
+      NotificationCenterManager.shared.addDelegate(self)
+    }
+
+    OnStopObserving {
+      NotificationCenterManager.shared.removeDelegate(self)
+    }
+
+    AsyncFunction("handleNotificationAsync") { (identifier: String, behavior: [String: Any], promise: Promise) in
+      guard let task = tasksMap[identifier] else {
+        promise.reject("ERR_NOTIFICATION_HANDLED", "Failed to handle notification \(identifier) because it has already been handled")
+        return
+      }
+      if let error = task.handleResponse(behavior) as? NSError {
+        promise.reject(error.userInfo["code"] as? String ?? "", error.userInfo["message"] as? String ?? "")
+      } else {
+        promise.resolve(nil)
+      }
+    }
+  }
+
+  /*
+   TODO: background processing
+
+   - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler
+   {
+     // Background task execution would happen here.
+     completionHandler(UIBackgroundFetchResultNoData);
+   }
+   */
+
+  public func didReceive(_ response: UNNotificationResponse, completionHandler: @escaping () -> Void) -> Bool {
+    NotificationCenterManager.shared.lastResponse = response
+    let serializedResponse = EXNotificationSerializer.serializedNotificationResponse(response)
+    self.sendEvent(onDidReceiveNotificationResponse, serializedResponse as [String: Any])
+    return true
+  }
+
+  public func willPresent(_ notification: UNNotification, completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) -> Bool {
+    let serializedNotification = EXNotificationSerializer.serializedNotification(notification)
+    self.sendEvent(onDidReceiveNotification, serializedNotification as [String: Any])
+    return true
+  }
+}
diff --git a/node_modules/expo-notifications/ios/EXNotifications/Notifications/NotificationCenterManager.swift b/node_modules/expo-notifications/ios/EXNotifications/Notifications/NotificationCenterManager.swift
index e584c1e..83d4433 100644
--- a/node_modules/expo-notifications/ios/EXNotifications/Notifications/NotificationCenterManager.swift
+++ b/node_modules/expo-notifications/ios/EXNotifications/Notifications/NotificationCenterManager.swift
@@ -37,6 +37,7 @@ public class NotificationCenterManager: NSObject,
   @objc
   public static let shared = NotificationCenterManager()
 
+  var lastResponse: UNNotificationResponse?
   var delegates: [NotificationDelegate] = []
   var pendingResponses: [UNNotificationResponse] = []
   let userNotificationCenter: UNUserNotificationCenter = UNUserNotificationCenter.current()
